/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./Resources/asset/js/webpack-post.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Resources/asset/js/nicefileinput/jquery.nicefileinput.min.js":
/*!**********************************************************************!*\
  !*** ./Resources/asset/js/nicefileinput/jquery.nicefileinput.min.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("!function (a) {\n  a.fn.nicefileinput = function (t) {\n    var e = {\n      label: \"Browse...\",\n      fullPath: !1\n    };\n    return t && a.extend(e, t), this.each(function () {\n      var t = this;\n\n      if (void 0 === a(t).attr(\"data-styled\")) {\n        var l = Math.round(1e4 * Math.random()),\n            r = new Date(),\n            i = r.getTime() + l.toString(),\n            n = a('<input type=\"text\" readonly=\"readonly\">').css({\n          display: \"block\",\n          \"float\": \"left\",\n          margin: 0,\n          padding: \"0 5px\"\n        }).addClass(\"NFI-filename NFI\" + i),\n            s = a(\"<div>\").css({\n          overflow: \"hidden\",\n          position: \"relative\",\n          display: \"block\",\n          \"float\": \"left\",\n          \"white-space\": \"nowrap\",\n          \"text-align\": \"center\"\n        }).addClass(\"NFI-button NFI\" + i).attr(\"disabled\", a(t).attr(\"disabled\")).html(e.label);\n        a(t).after(n), a(t).wrap(s), a(\".NFI\" + i).wrapAll('<div class=\"NFI-wrapper\" id=\"NFI-wrapper-' + i + '\" />'), a(\".NFI-wrapper\").css({\n          overflow: \"auto\",\n          display: \"inline-block\"\n        }), a(\"#NFI-wrapper-\" + i).addClass(a(t).attr(\"class\")), a(t).css({\n          opacity: 0,\n          position: \"absolute\",\n          border: \"none\",\n          margin: 0,\n          padding: 0,\n          top: 0,\n          right: 0,\n          cursor: \"pointer\",\n          height: \"60px\"\n        }).addClass(\"NFI-current\"), a(t).on(\"change\", function () {\n          var l = a(t).val();\n          if (e.fullPath) n.val(l);else {\n            var r = l.split(/[/\\\\]/);\n            n.val(r[r.length - 1]);\n          }\n        }), a(t).attr(\"data-styled\", !0);\n      }\n    });\n  };\n}(jQuery);\n\n//# sourceURL=webpack:///./Resources/asset/js/nicefileinput/jquery.nicefileinput.min.js?");

/***/ }),

/***/ "./Resources/asset/js/post.js":
/*!************************************!*\
  !*** ./Resources/asset/js/post.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var _this = this;\n\njQuery(document).ready(function () {\n  // require('../showdown/src/extensions/twitter')\n  // var Showdown = require('../showdown/src/showdown');\n\n  /**\n   * Initialize the post editor\n   */\n  jQuery('.wf_textarea_post').markdown({\n    language: storeJs.locale,\n    onPreview: function onPreview(e) {\n      var converter = new Showdown.converter({\n        extensions: ['twitter', 'github']\n      });\n      var html = converter.makeHtml(nl2br(e.getContent()), storeJs.assetPath);\n      return html;\n    },\n    fullscreen: {\n      enable: false\n    }\n  });\n  /**\n   * Clear post editor content draft\n   */\n\n  jQuery('#wf_form_post').submit(function (e) {\n    if (getCookie(\"post_editor_\".concat(storeJs.postEditorId))) {\n      e.preventDefault();\n      clearInterval(saveTimeout);\n      eraseCookie(\"post_editor_\".concat(storeJs.postEditorId));\n\n      _this.submit();\n    }\n  });\n  /**\n   * nl2br function missing in js\n   * @param {string} str\n   * @param {bool} is_xhtml\n   */\n\n  nl2br = function nl2br(str, is_xhtml) {\n    var breakTag = is_xhtml || typeof is_xhtml === 'undefined' ? '<br />' : '<br>';\n    return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, \"$1\".concat(breakTag, \"$2\"));\n  };\n  /**\n   * Get a cookie by its name\n   * @param name\n   * @return string\n   */\n\n\n  getCookie = function getCookie(name) {\n    var nameEQ = \"\".concat(name, \"=\");\n    var ca = document.cookie.split(';');\n\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n\n      while (c.charAt(0) == ' ') {\n        c = c.substring(1, c.length);\n      }\n\n      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n    }\n\n    return null;\n  };\n\n  setTimeout(function () {\n    getSavedPostEditor();\n  }, 1000);\n  /**\n   * Get the post draft saved for this thread\n   */\n\n  getSavedPostEditor = function getSavedPostEditor() {\n    var postEditor = document.getElementsByClassName('wf_textarea_post')[0],\n        threadId = document.getElementsByClassName('wf_thread')[0].getAttribute('data-id'),\n        postSaved = getCookie(\"post_editor_\".concat(threadId));\n\n    if (postSaved) {\n      postEditor.value = postSaved;\n    }\n  };\n  /**\n   * Set a cookie\n   * @param name\n   * @param value\n   * @param days\n   */\n\n\n  setCookie = function setCookie(name, value, days) {\n    var expires = '';\n\n    if (days) {\n      var date = new Date();\n      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n      expires = \"; expires=\".concat(date.toUTCString());\n    }\n\n    document.cookie = \"\".concat(name, \"=\").concat(value || '').concat(expires, \"; path=/\");\n  };\n  /**\n   * Erase a cookie\n   * @param name\n   */\n\n\n  eraseCookie = function eraseCookie(name) {\n    var d = new Date(); //Create an date object\n\n    d.setTime(d.getTime() - 1000 * 60 * 60 * 24); //Set the time to the past. 1000 milliseonds = 1 second\n\n    var expires = \"expires=\".concat(d.toGMTString()); //Compose the expiration date\n\n    window.document.cookie = \"\".concat(name, \"=; \").concat(expires, \"; path=/\"); //Set the cookie with name and the expiration date\n  };\n\n  var saveTimeout = setInterval(function () {\n    savePostEditor();\n  }, 30000);\n  /**\n   * Save the post editor content as draft\n   */\n\n  savePostEditor = function savePostEditor() {\n    var postEditor = document.getElementsByClassName('wf_textarea_post')[0];\n\n    if (!postEditor || !postEditor.value) {\n      return;\n    }\n\n    setCookie(\"post_editor_\".concat(storeJs.postEditorId), postEditor.value, 30);\n    var dateSaved = new Date();\n\n    if (jQuery('#saved_draft_msg').length) {\n      var msg = \"\".concat(storeJs.trans['message.post_saved_draft'], \" \").concat(dateSaved.getHours(), \":\").concat(dateSaved.getMinutes() < 10 ? '0' : '').concat(dateSaved.getMinutes());\n      jQuery('#saved_draft_msg').html(msg);\n    } else {\n      var _msg = \"\\n                <div id=\\\"saved_draft_msg\\\" class=\\\"wf_small_message\\\">'\\n                \".concat(storeJs.trans['message.post_saved_draft'], \" \").concat(dateSaved.getHours(), \":\").concat(dateSaved.getMinutes() < 10 ? '0' : '').concat(dateSaved.getMinutes(), \"\\n                </div>\");\n\n      jQuery('.md-header').after();\n    }\n  };\n});\n\n//# sourceURL=webpack:///./Resources/asset/js/post.js?");

/***/ }),

/***/ "./Resources/asset/js/webpack-post.js":
/*!********************************************!*\
  !*** ./Resources/asset/js/webpack-post.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ../markdown/css/bootstrap-markdown.min.css */ \"./Resources/asset/markdown/css/bootstrap-markdown.min.css\");\n\n__webpack_require__(/*! ../markdown/css/bootstrap.min.css */ \"./Resources/asset/markdown/css/bootstrap.min.css\");\n\n__webpack_require__(/*! ../showdown/src/showdown */ \"./Resources/asset/showdown/src/showdown.js\");\n\n__webpack_require__(/*! ../showdown/src/extensions/twitter */ \"./Resources/asset/showdown/src/extensions/twitter.js\");\n\n__webpack_require__(/*! ../showdown/src/extensions/github */ \"./Resources/asset/showdown/src/extensions/github.js\");\n\n__webpack_require__(/*! ../markdown/js/bootstrap-markdown */ \"./Resources/asset/markdown/js/bootstrap-markdown.js\");\n\n__webpack_require__(/*! ../markdown/locale/bootstrap-markdown.fr */ \"./Resources/asset/markdown/locale/bootstrap-markdown.fr.js\");\n\n__webpack_require__(/*! ./nicefileinput/jquery.nicefileinput.min */ \"./Resources/asset/js/nicefileinput/jquery.nicefileinput.min.js\");\n\n__webpack_require__(/*! ./post */ \"./Resources/asset/js/post.js\");\n\n//# sourceURL=webpack:///./Resources/asset/js/webpack-post.js?");

/***/ }),

/***/ "./Resources/asset/markdown/css/bootstrap-markdown.min.css":
/*!*****************************************************************!*\
  !*** ./Resources/asset/markdown/css/bootstrap-markdown.min.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./Resources/asset/markdown/css/bootstrap-markdown.min.css?");

/***/ }),

/***/ "./Resources/asset/markdown/css/bootstrap.min.css":
/*!********************************************************!*\
  !*** ./Resources/asset/markdown/css/bootstrap.min.css ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./Resources/asset/markdown/css/bootstrap.min.css?");

/***/ }),

/***/ "./Resources/asset/markdown/js/bootstrap-markdown.js":
/*!***********************************************************!*\
  !*** ./Resources/asset/markdown/js/bootstrap-markdown.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* ===================================================\n * bootstrap-markdown.js v2.9.0\n * http://github.com/toopay/bootstrap-markdown\n * ===================================================\n * Copyright 2013-2015 Taufan Aditya\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n!function ($) {\n  \"use strict\"; // jshint ;_;\n\n  /* MARKDOWN CLASS DEFINITION\n   * ========================== */\n\n  var Markdown = function Markdown(element, options) {\n    // @TODO : remove this BC on next major release\n    // @see : https://github.com/toopay/bootstrap-markdown/issues/109\n    var opts = ['autofocus', 'savable', 'hideable', 'width', 'height', 'resize', 'iconlibrary', 'language', 'footer', 'fullscreen', 'hiddenButtons', 'disabledButtons'];\n    $.each(opts, function (_, opt) {\n      if (typeof $(element).data(opt) !== 'undefined') {\n        options = _typeof(options) == 'object' ? options : {};\n        options[opt] = $(element).data(opt);\n      }\n    }); // End BC\n    // Class Properties\n\n    this.$ns = 'bootstrap-markdown';\n    this.$element = $(element);\n    this.$editable = {\n      el: null,\n      type: null,\n      attrKeys: [],\n      attrValues: [],\n      content: null\n    };\n    this.$options = $.extend(true, {}, $.fn.markdown.defaults, options, this.$element.data('options'));\n    this.$oldContent = null;\n    this.$isPreview = false;\n    this.$isFullscreen = false;\n    this.$editor = null;\n    this.$textarea = null;\n    this.$handler = [];\n    this.$callback = [];\n    this.$nextTab = [];\n    this.showEditor();\n  };\n\n  Markdown.prototype = {\n    constructor: Markdown,\n    __alterButtons: function __alterButtons(name, alter) {\n      var handler = this.$handler,\n          isAll = name == 'all',\n          that = this;\n      $.each(handler, function (k, v) {\n        var halt = true;\n\n        if (isAll) {\n          halt = false;\n        } else {\n          halt = v.indexOf(name) < 0;\n        }\n\n        if (halt === false) {\n          alter(that.$editor.find('button[data-handler=\"' + v + '\"]'));\n        }\n      });\n    },\n    __buildButtons: function __buildButtons(buttonsArray, container) {\n      var i,\n          ns = this.$ns,\n          handler = this.$handler,\n          callback = this.$callback;\n\n      for (i = 0; i < buttonsArray.length; i++) {\n        // Build each group container\n        var y,\n            btnGroups = buttonsArray[i];\n\n        for (y = 0; y < btnGroups.length; y++) {\n          // Build each button group\n          var z,\n              buttons = btnGroups[y].data,\n              btnGroupContainer = $('<div/>', {\n            'class': 'btn-group'\n          });\n\n          for (z = 0; z < buttons.length; z++) {\n            var button = buttons[z],\n                buttonContainer,\n                buttonIconContainer,\n                buttonHandler = ns + '-' + button.name,\n                buttonIcon = this.__getIcon(button.icon),\n                btnText = button.btnText ? button.btnText : '',\n                btnClass = button.btnClass ? button.btnClass : 'btn',\n                tabIndex = button.tabIndex ? button.tabIndex : '-1',\n                hotkey = typeof button.hotkey !== 'undefined' ? button.hotkey : '',\n                hotkeyCaption = typeof jQuery.hotkeys !== 'undefined' && hotkey !== '' ? ' (' + hotkey + ')' : ''; // Construct the button object\n\n\n            buttonContainer = $('<button></button>');\n            buttonContainer.text(' ' + this.__localize(btnText)).addClass('btn-default btn-sm').addClass(btnClass);\n\n            if (btnClass.match(/btn\\-(primary|success|info|warning|danger|link)/)) {\n              buttonContainer.removeClass('btn-default');\n            }\n\n            buttonContainer.attr({\n              'type': 'button',\n              'title': this.__localize(button.title) + hotkeyCaption,\n              'tabindex': tabIndex,\n              'data-provider': ns,\n              'data-handler': buttonHandler,\n              'data-hotkey': hotkey\n            });\n\n            if (button.toggle === true) {\n              buttonContainer.attr('data-toggle', 'button');\n            }\n\n            buttonIconContainer = $('<span/>');\n            buttonIconContainer.addClass(buttonIcon);\n            buttonIconContainer.prependTo(buttonContainer); // Attach the button object\n\n            btnGroupContainer.append(buttonContainer); // Register handler and callback\n\n            handler.push(buttonHandler);\n            callback.push(button.callback);\n          } // Attach the button group into container dom\n\n\n          container.append(btnGroupContainer);\n        }\n      }\n\n      return container;\n    },\n    __setListener: function __setListener() {\n      // Set size and resizable Properties\n      var hasRows = typeof this.$textarea.attr('rows') !== 'undefined',\n          maxRows = this.$textarea.val().split(\"\\n\").length > 5 ? this.$textarea.val().split(\"\\n\").length : '5',\n          rowsVal = hasRows ? this.$textarea.attr('rows') : maxRows;\n      this.$textarea.attr('rows', rowsVal);\n\n      if (this.$options.resize) {\n        this.$textarea.css('resize', this.$options.resize);\n      }\n\n      this.$textarea.on('focus', $.proxy(this.focus, this)).on('keypress', $.proxy(this.keypress, this)).on('keyup', $.proxy(this.keyup, this)).on('change', $.proxy(this.change, this)).on('select', $.proxy(this.select, this));\n\n      if (this.eventSupported('keydown')) {\n        this.$textarea.on('keydown', $.proxy(this.keydown, this));\n      } // Re-attach markdown data\n\n\n      this.$textarea.data('markdown', this);\n    },\n    __handle: function __handle(e) {\n      var target = $(e.currentTarget),\n          handler = this.$handler,\n          callback = this.$callback,\n          handlerName = target.attr('data-handler'),\n          callbackIndex = handler.indexOf(handlerName),\n          callbackHandler = callback[callbackIndex]; // Trigger the focusin\n\n      $(e.currentTarget).focus();\n      callbackHandler(this); // Trigger onChange for each button handle\n\n      this.change(this); // Unless it was the save handler,\n      // focusin the textarea\n\n      if (handlerName.indexOf('cmdSave') < 0) {\n        this.$textarea.focus();\n      }\n\n      e.preventDefault();\n    },\n    __localize: function __localize(string) {\n      var messages = $.fn.markdown.messages,\n          language = this.$options.language;\n\n      if (typeof messages !== 'undefined' && typeof messages[language] !== 'undefined' && typeof messages[language][string] !== 'undefined') {\n        return messages[language][string];\n      }\n\n      return string;\n    },\n    __getIcon: function __getIcon(src) {\n      return _typeof(src) == 'object' ? src[this.$options.iconlibrary] : src;\n    },\n    setFullscreen: function setFullscreen(mode) {\n      var $editor = this.$editor,\n          $textarea = this.$textarea;\n\n      if (mode === true) {\n        $editor.addClass('md-fullscreen-mode');\n        $('body').addClass('md-nooverflow');\n        this.$options.onFullscreen(this);\n      } else {\n        $editor.removeClass('md-fullscreen-mode');\n        $('body').removeClass('md-nooverflow');\n        if (this.$isPreview == true) this.hidePreview().showPreview();\n      }\n\n      this.$isFullscreen = mode;\n      $textarea.focus();\n    },\n    showEditor: function showEditor() {\n      var instance = this,\n          textarea,\n          ns = this.$ns,\n          container = this.$element,\n          originalHeigth = container.css('height'),\n          originalWidth = container.css('width'),\n          editable = this.$editable,\n          handler = this.$handler,\n          callback = this.$callback,\n          options = this.$options,\n          editor = $('<div/>', {\n        'class': 'md-editor',\n        click: function click() {\n          instance.focus();\n        }\n      }); // Prepare the editor\n\n      if (this.$editor === null) {\n        // Create the panel\n        var editorHeader = $('<div/>', {\n          'class': 'md-header btn-toolbar'\n        }); // Merge the main & additional button groups together\n\n        var allBtnGroups = [];\n        if (options.buttons.length > 0) allBtnGroups = allBtnGroups.concat(options.buttons[0]);\n        if (options.additionalButtons.length > 0) allBtnGroups = allBtnGroups.concat(options.additionalButtons[0]); // Reduce and/or reorder the button groups\n\n        if (options.reorderButtonGroups.length > 0) {\n          allBtnGroups = allBtnGroups.filter(function (btnGroup) {\n            return options.reorderButtonGroups.indexOf(btnGroup.name) > -1;\n          }).sort(function (a, b) {\n            if (options.reorderButtonGroups.indexOf(a.name) < options.reorderButtonGroups.indexOf(b.name)) return -1;\n            if (options.reorderButtonGroups.indexOf(a.name) > options.reorderButtonGroups.indexOf(b.name)) return 1;\n            return 0;\n          });\n        } // Build the buttons\n\n\n        if (allBtnGroups.length > 0) {\n          editorHeader = this.__buildButtons([allBtnGroups], editorHeader);\n        }\n\n        if (options.fullscreen.enable) {\n          editorHeader.append('<div class=\"md-controls\"><a class=\"md-control md-control-fullscreen\" href=\"#\"><span class=\"' + this.__getIcon(options.fullscreen.icons.fullscreenOn) + '\"></span></a></div>').on('click', '.md-control-fullscreen', function (e) {\n            e.preventDefault();\n            instance.setFullscreen(true);\n          });\n        }\n\n        editor.append(editorHeader); // Wrap the textarea\n\n        if (container.is('textarea')) {\n          container.before(editor);\n          textarea = container;\n          textarea.addClass('md-input');\n          editor.append(textarea);\n        } else {\n          var rawContent = typeof toMarkdown == 'function' ? toMarkdown(container.html()) : container.html(),\n              currentContent = $.trim(rawContent); // This is some arbitrary content that could be edited\n\n          textarea = $('<textarea/>', {\n            'class': 'md-input',\n            'val': currentContent\n          });\n          editor.append(textarea); // Save the editable\n\n          editable.el = container;\n          editable.type = container.prop('tagName').toLowerCase();\n          editable.content = container.html();\n          $(container[0].attributes).each(function () {\n            editable.attrKeys.push(this.nodeName);\n            editable.attrValues.push(this.nodeValue);\n          }); // Set editor to blocked the original container\n\n          container.replaceWith(editor);\n        }\n\n        var editorFooter = $('<div/>', {\n          'class': 'md-footer'\n        }),\n            createFooter = false,\n            footer = ''; // Create the footer if savable\n\n        if (options.savable) {\n          createFooter = true;\n          var saveHandler = 'cmdSave'; // Register handler and callback\n\n          handler.push(saveHandler);\n          callback.push(options.onSave);\n          editorFooter.append('<button class=\"btn btn-success\" data-provider=\"' + ns + '\" data-handler=\"' + saveHandler + '\"><i class=\"icon icon-white icon-ok\"></i> ' + this.__localize('Save') + '</button>');\n        }\n\n        footer = typeof options.footer === 'function' ? options.footer(this) : options.footer;\n\n        if ($.trim(footer) !== '') {\n          createFooter = true;\n          editorFooter.append(footer);\n        }\n\n        if (createFooter) editor.append(editorFooter); // Set width\n\n        if (options.width && options.width !== 'inherit') {\n          if (jQuery.isNumeric(options.width)) {\n            editor.css('display', 'table');\n            textarea.css('width', options.width + 'px');\n          } else {\n            editor.addClass(options.width);\n          }\n        } // Set height\n\n\n        if (options.height && options.height !== 'inherit') {\n          if (jQuery.isNumeric(options.height)) {\n            var height = options.height;\n            if (editorHeader) height = Math.max(0, height - editorHeader.outerHeight());\n            if (editorFooter) height = Math.max(0, height - editorFooter.outerHeight());\n            textarea.css('height', height + 'px');\n          } else {\n            editor.addClass(options.height);\n          }\n        } // Reference\n\n\n        this.$editor = editor;\n        this.$textarea = textarea;\n        this.$editable = editable;\n        this.$oldContent = this.getContent();\n\n        this.__setListener(); // Set editor attributes, data short-hand API and listener\n\n\n        this.$editor.attr('id', new Date().getTime());\n        this.$editor.on('click', '[data-provider=\"bootstrap-markdown\"]', $.proxy(this.__handle, this));\n\n        if (this.$element.is(':disabled') || this.$element.is('[readonly]')) {\n          this.$editor.addClass('md-editor-disabled');\n          this.disableButtons('all');\n        }\n\n        if (this.eventSupported('keydown') && _typeof(jQuery.hotkeys) === 'object') {\n          editorHeader.find('[data-provider=\"bootstrap-markdown\"]').each(function () {\n            var $button = $(this),\n                hotkey = $button.attr('data-hotkey');\n\n            if (hotkey.toLowerCase() !== '') {\n              textarea.bind('keydown', hotkey, function () {\n                $button.trigger('click');\n                return false;\n              });\n            }\n          });\n        }\n\n        if (options.initialstate === 'preview') {\n          this.showPreview();\n        } else if (options.initialstate === 'fullscreen' && options.fullscreen.enable) {\n          this.setFullscreen(true);\n        }\n      } else {\n        this.$editor.show();\n      }\n\n      if (options.autofocus) {\n        this.$textarea.focus();\n        this.$editor.addClass('active');\n      }\n\n      if (options.fullscreen.enable && options.fullscreen !== false) {\n        this.$editor.append('<div class=\"md-fullscreen-controls\">' + '<a href=\"#\" class=\"exit-fullscreen\" title=\"Exit fullscreen\"><span class=\"' + this.__getIcon(options.fullscreen.icons.fullscreenOff) + '\">' + '</span></a>' + '</div>');\n        this.$editor.on('click', '.exit-fullscreen', function (e) {\n          e.preventDefault();\n          instance.setFullscreen(false);\n        });\n      } // hide hidden buttons from options\n\n\n      this.hideButtons(options.hiddenButtons); // disable disabled buttons from options\n\n      this.disableButtons(options.disabledButtons); // Trigger the onShow hook\n\n      options.onShow(this);\n      return this;\n    },\n    parseContent: function parseContent(val) {\n      var content; // parse with supported markdown parser\n\n      var val = val || this.$textarea.val();\n\n      if (this.$options.parser) {\n        content = this.$options.parser(val);\n      } else if ((typeof markdown === \"undefined\" ? \"undefined\" : _typeof(markdown)) == 'object') {\n        content = markdown.toHTML(val);\n      } else if (typeof marked == 'function') {\n        content = marked(val);\n      } else {\n        content = val;\n      }\n\n      return content;\n    },\n    showPreview: function showPreview() {\n      var options = this.$options,\n          container = this.$textarea,\n          afterContainer = container.next(),\n          replacementContainer = $('<div/>', {\n        'class': 'md-preview',\n        'data-provider': 'markdown-preview'\n      }),\n          content,\n          callbackContent;\n\n      if (this.$isPreview == true) {\n        // Avoid sequenced element creation on missused scenario\n        // @see https://github.com/toopay/bootstrap-markdown/issues/170\n        return this;\n      } // Give flag that tell the editor enter preview mode\n\n\n      this.$isPreview = true; // Disable all buttons\n\n      this.disableButtons('all').enableButtons('cmdPreview'); // Try to get the content from callback\n\n      callbackContent = options.onPreview(this); // Set the content based from the callback content if string otherwise parse value from textarea\n\n      content = typeof callbackContent == 'string' ? callbackContent : this.parseContent(); // Build preview element\n\n      replacementContainer.html(content);\n\n      if (afterContainer && afterContainer.attr('class') == 'md-footer') {\n        // If there is footer element, insert the preview container before it\n        replacementContainer.insertBefore(afterContainer);\n      } else {\n        // Otherwise, just append it after textarea\n        container.parent().append(replacementContainer);\n      } // Set the preview element dimensions\n\n\n      replacementContainer.css({\n        width: parseInt(container.outerWidth() - 21) + 'px',\n        height: parseInt(container.outerHeight() - 22) + 'px'\n      });\n\n      if (this.$options.resize) {\n        replacementContainer.css('resize', this.$options.resize);\n      } // Hide the last-active textarea\n\n\n      container.hide(); // Attach the editor instances\n\n      replacementContainer.data('markdown', this);\n\n      if (this.$element.is(':disabled') || this.$element.is('[readonly]')) {\n        this.$editor.addClass('md-editor-disabled');\n        this.disableButtons('all');\n      }\n\n      return this;\n    },\n    hidePreview: function hidePreview() {\n      // Give flag that tell the editor quit preview mode\n      this.$isPreview = false; // Obtain the preview container\n\n      var container = this.$editor.find('div[data-provider=\"markdown-preview\"]'); // Remove the preview container\n\n      container.remove(); // Enable all buttons\n\n      this.enableButtons('all'); // Disable configured disabled buttons\n\n      this.disableButtons(this.$options.disabledButtons); // Back to the editor\n\n      this.$textarea.show();\n\n      this.__setListener();\n\n      return this;\n    },\n    isDirty: function isDirty() {\n      return this.$oldContent != this.getContent();\n    },\n    getContent: function getContent() {\n      return this.$textarea.val();\n    },\n    setContent: function setContent(content) {\n      this.$textarea.val(content);\n      return this;\n    },\n    findSelection: function findSelection(chunk) {\n      var content = this.getContent(),\n          startChunkPosition;\n\n      if (startChunkPosition = content.indexOf(chunk), startChunkPosition >= 0 && chunk.length > 0) {\n        var oldSelection = this.getSelection(),\n            selection;\n        this.setSelection(startChunkPosition, startChunkPosition + chunk.length);\n        selection = this.getSelection();\n        this.setSelection(oldSelection.start, oldSelection.end);\n        return selection;\n      } else {\n        return null;\n      }\n    },\n    getSelection: function getSelection() {\n      var e = this.$textarea[0];\n      return ('selectionStart' in e && function () {\n        var l = e.selectionEnd - e.selectionStart;\n        return {\n          start: e.selectionStart,\n          end: e.selectionEnd,\n          length: l,\n          text: e.value.substr(e.selectionStart, l)\n        };\n      } ||\n      /* browser not supported */\n      function () {\n        return null;\n      })();\n    },\n    setSelection: function setSelection(start, end) {\n      var e = this.$textarea[0];\n      return ('selectionStart' in e && function () {\n        e.selectionStart = start;\n        e.selectionEnd = end;\n        return;\n      } ||\n      /* browser not supported */\n      function () {\n        return null;\n      })();\n    },\n    replaceSelection: function replaceSelection(text) {\n      var e = this.$textarea[0];\n      return ('selectionStart' in e && function () {\n        e.value = e.value.substr(0, e.selectionStart) + text + e.value.substr(e.selectionEnd, e.value.length); // Set cursor to the last replacement end\n\n        e.selectionStart = e.value.length;\n        return this;\n      } ||\n      /* browser not supported */\n      function () {\n        e.value += text;\n        return jQuery(e);\n      })();\n    },\n    getNextTab: function getNextTab() {\n      // Shift the nextTab\n      if (this.$nextTab.length === 0) {\n        return null;\n      } else {\n        var nextTab,\n            tab = this.$nextTab.shift();\n\n        if (typeof tab == 'function') {\n          nextTab = tab();\n        } else if (_typeof(tab) == 'object' && tab.length > 0) {\n          nextTab = tab;\n        }\n\n        return nextTab;\n      }\n    },\n    setNextTab: function setNextTab(start, end) {\n      // Push new selection into nextTab collections\n      if (typeof start == 'string') {\n        var that = this;\n        this.$nextTab.push(function () {\n          return that.findSelection(start);\n        });\n      } else if (typeof start == 'number' && typeof end == 'number') {\n        var oldSelection = this.getSelection();\n        this.setSelection(start, end);\n        this.$nextTab.push(this.getSelection());\n        this.setSelection(oldSelection.start, oldSelection.end);\n      }\n\n      return;\n    },\n    __parseButtonNameParam: function __parseButtonNameParam(nameParam) {\n      var buttons = [];\n\n      if (typeof nameParam == 'string') {\n        buttons = nameParam.split(',');\n      } else {\n        buttons = nameParam;\n      }\n\n      return buttons;\n    },\n    enableButtons: function enableButtons(name) {\n      var buttons = this.__parseButtonNameParam(name),\n          that = this;\n\n      $.each(buttons, function (i, v) {\n        that.__alterButtons(buttons[i], function (el) {\n          el.removeAttr('disabled');\n        });\n      });\n      return this;\n    },\n    disableButtons: function disableButtons(name) {\n      var buttons = this.__parseButtonNameParam(name),\n          that = this;\n\n      $.each(buttons, function (i, v) {\n        that.__alterButtons(buttons[i], function (el) {\n          el.attr('disabled', 'disabled');\n        });\n      });\n      return this;\n    },\n    hideButtons: function hideButtons(name) {\n      var buttons = this.__parseButtonNameParam(name),\n          that = this;\n\n      $.each(buttons, function (i, v) {\n        that.__alterButtons(buttons[i], function (el) {\n          el.addClass('hidden');\n        });\n      });\n      return this;\n    },\n    showButtons: function showButtons(name) {\n      var buttons = this.__parseButtonNameParam(name),\n          that = this;\n\n      $.each(buttons, function (i, v) {\n        that.__alterButtons(buttons[i], function (el) {\n          el.removeClass('hidden');\n        });\n      });\n      return this;\n    },\n    eventSupported: function eventSupported(eventName) {\n      var isSupported = eventName in this.$element;\n\n      if (!isSupported) {\n        this.$element.setAttribute(eventName, 'return;');\n        isSupported = typeof this.$element[eventName] === 'function';\n      }\n\n      return isSupported;\n    },\n    keyup: function keyup(e) {\n      var blocked = false;\n\n      switch (e.keyCode) {\n        case 40: // down arrow\n\n        case 38: // up arrow\n\n        case 16: // shift\n\n        case 17: // ctrl\n\n        case 18:\n          // alt\n          break;\n\n        case 9:\n          // tab\n          var nextTab;\n\n          if (nextTab = this.getNextTab(), nextTab !== null) {\n            // Get the nextTab if exists\n            var that = this;\n            setTimeout(function () {\n              that.setSelection(nextTab.start, nextTab.end);\n            }, 500);\n            blocked = true;\n          } else {\n            // The next tab memory contains nothing...\n            // check the cursor position to determine tab action\n            var cursor = this.getSelection();\n\n            if (cursor.start == cursor.end && cursor.end == this.getContent().length) {\n              // The cursor already reach the end of the content\n              blocked = false;\n            } else {\n              // Put the cursor to the end\n              this.setSelection(this.getContent().length, this.getContent().length);\n              blocked = true;\n            }\n          }\n\n          break;\n\n        case 13:\n          // enter\n          blocked = false;\n          break;\n\n        case 27:\n          // escape\n          if (this.$isFullscreen) this.setFullscreen(false);\n          blocked = false;\n          break;\n\n        default:\n          blocked = false;\n      }\n\n      if (blocked) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      this.$options.onChange(this);\n    },\n    change: function change(e) {\n      this.$options.onChange(this);\n      return this;\n    },\n    select: function select(e) {\n      this.$options.onSelect(this);\n      return this;\n    },\n    focus: function focus(e) {\n      var options = this.$options,\n          isHideable = options.hideable,\n          editor = this.$editor;\n      editor.addClass('active'); // Blur other markdown(s)\n\n      $(document).find('.md-editor').each(function () {\n        if ($(this).attr('id') !== editor.attr('id')) {\n          var attachedMarkdown;\n\n          if (attachedMarkdown = $(this).find('textarea').data('markdown'), attachedMarkdown === null) {\n            attachedMarkdown = $(this).find('div[data-provider=\"markdown-preview\"]').data('markdown');\n          }\n\n          if (attachedMarkdown) {\n            attachedMarkdown.blur();\n          }\n        }\n      }); // Trigger the onFocus hook\n\n      options.onFocus(this);\n      return this;\n    },\n    blur: function blur(e) {\n      var options = this.$options,\n          isHideable = options.hideable,\n          editor = this.$editor,\n          editable = this.$editable;\n\n      if (editor.hasClass('active') || this.$element.parent().length === 0) {\n        editor.removeClass('active');\n\n        if (isHideable) {\n          // Check for editable elements\n          if (editable.el !== null) {\n            // Build the original element\n            var oldElement = $('<' + editable.type + '/>'),\n                content = this.getContent(),\n                currentContent = this.parseContent(content);\n            $(editable.attrKeys).each(function (k, v) {\n              oldElement.attr(editable.attrKeys[k], editable.attrValues[k]);\n            }); // Get the editor content\n\n            oldElement.html(currentContent);\n            editor.replaceWith(oldElement);\n          } else {\n            editor.hide();\n          }\n        } // Trigger the onBlur hook\n\n\n        options.onBlur(this);\n      }\n\n      return this;\n    }\n  };\n  /* MARKDOWN PLUGIN DEFINITION\n   * ========================== */\n\n  var old = $.fn.markdown;\n\n  $.fn.markdown = function (option) {\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('markdown'),\n          options = _typeof(option) == 'object' && option;\n      if (!data) $this.data('markdown', data = new Markdown(this, options));\n    });\n  };\n\n  $.fn.markdown.messages = {};\n  $.fn.markdown.defaults = {\n    /* Editor Properties */\n    autofocus: false,\n    hideable: false,\n    savable: false,\n    width: 'inherit',\n    height: 'inherit',\n    resize: 'none',\n    iconlibrary: 'glyph',\n    language: 'en',\n    initialstate: 'editor',\n    parser: null,\n\n    /* Buttons Properties */\n    buttons: [[{\n      name: 'groupFont',\n      data: [{\n        name: 'cmdBold',\n        hotkey: 'Ctrl+B',\n        title: 'Bold',\n        icon: {\n          glyph: 'glyphicon glyphicon-bold',\n          fa: 'fa fa-bold',\n          'fa-3': 'icon-bold'\n        },\n        callback: function callback(e) {\n          // Give/remove ** surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent();\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('strong text');\n          } else {\n            chunk = selected.text;\n          } // transform selection and set the cursor into chunked text\n\n\n          if (content.substr(selected.start - 2, 2) === '**' && content.substr(selected.end, 2) === '**') {\n            e.setSelection(selected.start - 2, selected.end + 2);\n            e.replaceSelection(chunk);\n            cursor = selected.start - 2;\n          } else {\n            e.replaceSelection('**' + chunk + '**');\n            cursor = selected.start + 2;\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdItalic',\n        title: 'Italic',\n        hotkey: 'Ctrl+I',\n        icon: {\n          glyph: 'glyphicon glyphicon-italic',\n          fa: 'fa fa-italic',\n          'fa-3': 'icon-italic'\n        },\n        callback: function callback(e) {\n          // Give/remove * surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent();\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('emphasized text');\n          } else {\n            chunk = selected.text;\n          } // transform selection and set the cursor into chunked text\n\n\n          if (content.substr(selected.start - 1, 1) === '_' && content.substr(selected.end, 1) === '_') {\n            e.setSelection(selected.start - 1, selected.end + 1);\n            e.replaceSelection(chunk);\n            cursor = selected.start - 1;\n          } else {\n            e.replaceSelection('_' + chunk + '_');\n            cursor = selected.start + 1;\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdHeading',\n        title: 'Heading',\n        hotkey: 'Ctrl+H',\n        icon: {\n          glyph: 'glyphicon glyphicon-header',\n          fa: 'fa fa-header',\n          'fa-3': 'icon-font'\n        },\n        callback: function callback(e) {\n          // Append/remove ### surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(),\n              pointer,\n              prevChar;\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('heading text');\n          } else {\n            chunk = selected.text + '\\n';\n          } // transform selection and set the cursor into chunked text\n\n\n          if ((pointer = 4, content.substr(selected.start - pointer, pointer) === '### ') || (pointer = 3, content.substr(selected.start - pointer, pointer) === '###')) {\n            e.setSelection(selected.start - pointer, selected.end);\n            e.replaceSelection(chunk);\n            cursor = selected.start - pointer;\n          } else if (selected.start > 0 && (prevChar = content.substr(selected.start - 1, 1), !!prevChar && prevChar != '\\n')) {\n            e.replaceSelection('\\n\\n### ' + chunk);\n            cursor = selected.start + 6;\n          } else {\n            // Empty string before element\n            e.replaceSelection('### ' + chunk);\n            cursor = selected.start + 4;\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }]\n    }, {\n      name: 'groupLink',\n      data: [{\n        name: 'cmdUrl',\n        title: 'URL/Link',\n        hotkey: 'Ctrl+L',\n        icon: {\n          glyph: 'glyphicon glyphicon-link',\n          fa: 'fa fa-link',\n          'fa-3': 'icon-link'\n        },\n        callback: function callback(e) {\n          // Give [] surround the selection and prepend the link\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(),\n              link;\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('enter link description here');\n          } else {\n            chunk = selected.text;\n          }\n\n          link = prompt(e.__localize('Insert Hyperlink'), 'http://');\n\n          if (link !== null && link !== '' && link !== 'http://' && link.substr(0, 4) === 'http') {\n            var sanitizedLink = $('<div>' + link + '</div>').text(); // transform selection and set the cursor into chunked text\n\n            e.replaceSelection('[' + chunk + '](' + sanitizedLink + ')');\n            cursor = selected.start + 1; // Set the cursor\n\n            e.setSelection(cursor, cursor + chunk.length);\n          }\n        }\n      }, {\n        name: 'cmdImage',\n        title: 'Image',\n        hotkey: 'Ctrl+G',\n        icon: {\n          glyph: 'glyphicon glyphicon-picture',\n          fa: 'fa fa-picture-o',\n          'fa-3': 'icon-picture'\n        },\n        callback: function callback(e) {\n          // Give ![] surround the selection and prepend the image link\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(),\n              link;\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('enter image description here');\n          } else {\n            chunk = selected.text;\n          }\n\n          link = prompt(e.__localize('Insert Image Hyperlink'), 'http://');\n\n          if (link !== null && link !== '' && link !== 'http://' && link.substr(0, 4) === 'http') {\n            var sanitizedLink = $('<div>' + link + '</div>').text(); // transform selection and set the cursor into chunked text\n\n            e.replaceSelection('![' + chunk + '](' + sanitizedLink + ' \"' + e.__localize('enter image title here') + '\")');\n            cursor = selected.start + 2; // Set the next tab\n\n            e.setNextTab(e.__localize('enter image title here')); // Set the cursor\n\n            e.setSelection(cursor, cursor + chunk.length);\n          }\n        }\n      }]\n    }, {\n      name: 'groupMisc',\n      data: [{\n        name: 'cmdList',\n        hotkey: 'Ctrl+U',\n        title: 'Unordered List',\n        icon: {\n          glyph: 'glyphicon glyphicon-list',\n          fa: 'fa fa-list',\n          'fa-3': 'icon-list-ul'\n        },\n        callback: function callback(e) {\n          // Prepend/Give - surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(); // transform selection and set the cursor into chunked text\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('list text here');\n            e.replaceSelection('- ' + chunk); // Set the cursor\n\n            cursor = selected.start + 2;\n          } else {\n            if (selected.text.indexOf('\\n') < 0) {\n              chunk = selected.text;\n              e.replaceSelection('- ' + chunk); // Set the cursor\n\n              cursor = selected.start + 2;\n            } else {\n              var list = [];\n              list = selected.text.split('\\n');\n              chunk = list[0];\n              $.each(list, function (k, v) {\n                list[k] = '- ' + v;\n              });\n              e.replaceSelection('\\n\\n' + list.join('\\n')); // Set the cursor\n\n              cursor = selected.start + 4;\n            }\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdListO',\n        hotkey: 'Ctrl+O',\n        title: 'Ordered List',\n        icon: {\n          glyph: 'glyphicon glyphicon-th-list',\n          fa: 'fa fa-list-ol',\n          'fa-3': 'icon-list-ol'\n        },\n        callback: function callback(e) {\n          // Prepend/Give - surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(); // transform selection and set the cursor into chunked text\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('list text here');\n            e.replaceSelection('1. ' + chunk); // Set the cursor\n\n            cursor = selected.start + 3;\n          } else {\n            if (selected.text.indexOf('\\n') < 0) {\n              chunk = selected.text;\n              e.replaceSelection('1. ' + chunk); // Set the cursor\n\n              cursor = selected.start + 3;\n            } else {\n              var list = [];\n              list = selected.text.split('\\n');\n              chunk = list[0];\n              $.each(list, function (k, v) {\n                list[k] = '1. ' + v;\n              });\n              e.replaceSelection('\\n\\n' + list.join('\\n')); // Set the cursor\n\n              cursor = selected.start + 5;\n            }\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdCode',\n        hotkey: 'Ctrl+K',\n        title: 'Code',\n        icon: {\n          glyph: 'glyphicon glyphicon-asterisk',\n          fa: 'fa fa-code',\n          'fa-3': 'icon-code'\n        },\n        callback: function callback(e) {\n          // Give/remove ** surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent();\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('code text here');\n          } else {\n            chunk = selected.text;\n          } // transform selection and set the cursor into chunked text\n\n\n          if (content.substr(selected.start - 4, 4) === '```\\n' && content.substr(selected.end, 4) === '\\n```') {\n            e.setSelection(selected.start - 4, selected.end + 4);\n            e.replaceSelection(chunk);\n            cursor = selected.start - 4;\n          } else if (content.substr(selected.start - 1, 1) === '`' && content.substr(selected.end, 1) === '`') {\n            e.setSelection(selected.start - 1, selected.end + 1);\n            e.replaceSelection(chunk);\n            cursor = selected.start - 1;\n          } else if (content.indexOf('\\n') > -1) {\n            e.replaceSelection('```\\n' + chunk + '\\n```');\n            cursor = selected.start + 4;\n          } else {\n            e.replaceSelection('`' + chunk + '`');\n            cursor = selected.start + 1;\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdQuote',\n        hotkey: 'Ctrl+Q',\n        title: 'Quote',\n        icon: {\n          glyph: 'glyphicon glyphicon-comment',\n          fa: 'fa fa-quote-left',\n          'fa-3': 'icon-quote-left'\n        },\n        callback: function callback(e) {\n          // Prepend/Give - surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(); // transform selection and set the cursor into chunked text\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('quote here');\n            e.replaceSelection('> ' + chunk); // Set the cursor\n\n            cursor = selected.start + 2;\n          } else {\n            if (selected.text.indexOf('\\n') < 0) {\n              chunk = selected.text;\n              e.replaceSelection('> ' + chunk); // Set the cursor\n\n              cursor = selected.start + 2;\n            } else {\n              var list = [];\n              list = selected.text.split('\\n');\n              chunk = list[0];\n              $.each(list, function (k, v) {\n                list[k] = '> ' + v;\n              });\n              e.replaceSelection('\\n\\n' + list.join('\\n')); // Set the cursor\n\n              cursor = selected.start + 4;\n            }\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }]\n    }, {\n      name: 'groupUtil',\n      data: [{\n        name: 'cmdPreview',\n        toggle: true,\n        hotkey: 'Ctrl+P',\n        title: 'Preview',\n        btnText: 'Preview',\n        btnClass: 'btn btn-primary btn-sm',\n        icon: {\n          glyph: 'glyphicon glyphicon-search',\n          fa: 'fa fa-search',\n          'fa-3': 'icon-search'\n        },\n        callback: function callback(e) {\n          // Check the preview mode and toggle based on this flag\n          var isPreview = e.$isPreview,\n              content;\n\n          if (isPreview === false) {\n            // Give flag that tell the editor enter preview mode\n            e.showPreview();\n          } else {\n            e.hidePreview();\n          }\n        }\n      }]\n    }]],\n    additionalButtons: [],\n    // Place to hook more buttons by code\n    reorderButtonGroups: [],\n    hiddenButtons: [],\n    // Default hidden buttons\n    disabledButtons: [],\n    // Default disabled buttons\n    footer: '',\n    fullscreen: {\n      enable: true,\n      icons: {\n        fullscreenOn: {\n          fa: 'fa fa-expand',\n          glyph: 'glyphicon glyphicon-fullscreen',\n          'fa-3': 'icon-resize-full'\n        },\n        fullscreenOff: {\n          fa: 'fa fa-compress',\n          glyph: 'glyphicon glyphicon-fullscreen',\n          'fa-3': 'icon-resize-small'\n        }\n      }\n    },\n\n    /* Events hook */\n    onShow: function onShow(e) {},\n    onPreview: function onPreview(e) {},\n    onSave: function onSave(e) {},\n    onBlur: function onBlur(e) {},\n    onFocus: function onFocus(e) {},\n    onChange: function onChange(e) {},\n    onFullscreen: function onFullscreen(e) {},\n    onSelect: function onSelect(e) {}\n  };\n  $.fn.markdown.Constructor = Markdown;\n  /* MARKDOWN NO CONFLICT\n   * ==================== */\n\n  $.fn.markdown.noConflict = function () {\n    $.fn.markdown = old;\n    return this;\n  };\n  /* MARKDOWN GLOBAL FUNCTION & DATA-API\n  * ==================================== */\n\n\n  var initMarkdown = function initMarkdown(el) {\n    var $this = el;\n\n    if ($this.data('markdown')) {\n      $this.data('markdown').showEditor();\n      return;\n    }\n\n    $this.markdown();\n  };\n\n  var blurNonFocused = function blurNonFocused(e) {\n    var $activeElement = $(document.activeElement); // Blur event\n\n    $(document).find('.md-editor').each(function () {\n      var $this = $(this),\n          focused = $activeElement.closest('.md-editor')[0] === this,\n          attachedMarkdown = $this.find('textarea').data('markdown') || $this.find('div[data-provider=\"markdown-preview\"]').data('markdown');\n\n      if (attachedMarkdown && !focused) {\n        attachedMarkdown.blur();\n      }\n    });\n  };\n\n  $(document).on('click.markdown.data-api', '[data-provide=\"markdown-editable\"]', function (e) {\n    initMarkdown($(this));\n    e.preventDefault();\n  }).on('click focusin', function (e) {\n    blurNonFocused(e);\n  }).ready(function () {\n    $('textarea[data-provide=\"markdown\"]').each(function () {\n      initMarkdown($(this));\n    });\n  });\n}(window.jQuery);\n\n//# sourceURL=webpack:///./Resources/asset/markdown/js/bootstrap-markdown.js?");

/***/ }),

/***/ "./Resources/asset/markdown/locale/bootstrap-markdown.fr.js":
/*!******************************************************************!*\
  !*** ./Resources/asset/markdown/locale/bootstrap-markdown.fr.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * French translation for bootstrap-markdown\n * Benoît Bourgeois <bierdok@gmail.com>\n */\n(function ($) {\n  $.fn.markdown.messages.fr = {\n    'Bold': \"Gras\",\n    'Italic': \"Italique\",\n    'Heading': \"Titre\",\n    'URL/Link': \"Insérer un lien HTTP\",\n    'Image': \"Insérer une image\",\n    'List': \"Liste à puces\",\n    'Preview': \"Prévisualiser\",\n    'strong text': \"texte important\",\n    'emphasized text': \"texte souligné\",\n    'heading text': \"texte d'entête\",\n    'enter link description here': \"entrez la description du lien ici\",\n    'Insert Hyperlink': \"Insérez le lien hypertexte\",\n    'enter image description here': \"entrez la description de l'image ici\",\n    'Insert Image Hyperlink': \"Insérez le lien hypertexte de l'image\",\n    'enter image title here': \"entrez le titre de l'image ici\",\n    'list text here': \"texte à puce ici\"\n  };\n})(jQuery);\n\n//# sourceURL=webpack:///./Resources/asset/markdown/locale/bootstrap-markdown.fr.js?");

/***/ }),

/***/ "./Resources/asset/showdown/src/extensions/github.js":
/*!***********************************************************!*\
  !*** ./Resources/asset/showdown/src/extensions/github.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n//  Github Extension (WIP)\n//  ~~strike-through~~   ->  <del>strike-through</del>\n//\n(function () {\n  var github = function github(converter) {\n    return [{\n      // strike-through\n      // NOTE: showdown already replaced \"~\" with \"~T\", so we need to adjust accordingly.\n      type: 'lang',\n      regex: '(~T){2}([^~]+)(~T){2}',\n      replace: function replace(match, prefix, content, suffix) {\n        return '<del>' + content + '</del>';\n      }\n    }];\n  }; // Client-side export\n\n\n  if (typeof window !== 'undefined' && window.Showdown && window.Showdown.extensions) {\n    window.Showdown.extensions.github = github;\n  } // Server-side export\n\n\n  if (true) module.exports = github;\n})();\n\n//# sourceURL=webpack:///./Resources/asset/showdown/src/extensions/github.js?");

/***/ }),

/***/ "./Resources/asset/showdown/src/extensions/twitter.js":
/*!************************************************************!*\
  !*** ./Resources/asset/showdown/src/extensions/twitter.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n//  Twitter Extension\n//  @username   ->  <a href=\"http://twitter.com/username\">@username</a>\n//  #hashtag    ->  <a href=\"http://twitter.com/search/%23hashtag\">#hashtag</a>\n//\n(function () {\n  var twitter = function twitter(converter) {\n    return [// @username syntax\n    {\n      type: 'lang',\n      regex: '\\\\B(\\\\\\\\)?@([\\\\S]+)\\\\b',\n      replace: function replace(match, leadingSlash, username) {\n        // Check if we matched the leading \\ and return nothing changed if so\n        if (leadingSlash === '\\\\') {\n          return match;\n        } else {\n          return '<a href=\"http://twitter.com/' + username + '\">@' + username + '</a>';\n        }\n      }\n    }, // #hashtag syntax\n    {\n      type: 'lang',\n      regex: '\\\\B(\\\\\\\\)?#([\\\\S]+)\\\\b',\n      replace: function replace(match, leadingSlash, tag) {\n        // Check if we matched the leading \\ and return nothing changed if so\n        if (leadingSlash === '\\\\') {\n          return match;\n        } else {\n          return '<a href=\"http://twitter.com/search/%23' + tag + '\">#' + tag + '</a>';\n        }\n      }\n    }, // Escaped @'s\n    {\n      type: 'lang',\n      regex: '\\\\\\\\@',\n      replace: '@'\n    }];\n  }; // Client-side export\n\n\n  if (typeof window !== 'undefined' && window.Showdown && window.Showdown.extensions) {\n    window.Showdown.extensions.twitter = twitter;\n  } // Server-side export\n\n\n  if (true) module.exports = twitter;\n})();\n\n//# sourceURL=webpack:///./Resources/asset/showdown/src/extensions/twitter.js?");

/***/ }),

/***/ "./Resources/asset/showdown/src/showdown.js":
/*!**************************************************!*\
  !*** ./Resources/asset/showdown/src/showdown.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;//\n// showdown.js -- A javascript port of Markdown.\n//\n// Copyright (c) 2007 John Fraser.\n//\n// Original Markdown Copyright (c) 2004-2005 John Gruber\n//   <http://daringfireball.net/projects/markdown/>\n//\n// Redistributable under a BSD-style open source license.\n// See license.txt for more information.\n//\n// The full source distribution is at:\n//\n//\t\t\t\tA A L\n//\t\t\t\tT C A\n//\t\t\t\tT K B\n//\n//   <http://www.attacklab.net/>\n//\n//\n// Wherever possible, Showdown is a straight, line-by-line port\n// of the Perl version of Markdown.\n//\n// This is not a normal parser design; it's basically just a\n// series of string substitutions.  It's hard to read and\n// maintain this way,  but keeping Showdown close to the original\n// design makes it easier to port new features.\n//\n// More importantly, Showdown behaves like markdown.pl in most\n// edge cases.  So web applications can do client-side preview\n// in Javascript, and then build identical HTML on the server.\n//\n// This port needs the new RegExp functionality of ECMA 262,\n// 3rd Edition (i.e. Javascript 1.5).  Most modern web browsers\n// should do fine.  Even with the new regular expression features,\n// We do a lot of work to emulate Perl's regex functionality.\n// The tricky changes in this file mostly have the \"attacklab:\"\n// label.  Major or self-explanatory changes don't.\n//\n// Smart diff tools like Araxis Merge will be able to match up\n// this file with markdown.pl in a useful way.  A little tweaking\n// helps: in a copy of markdown.pl, replace \"#\" with \"//\" and\n// replace \"$text\" with \"text\".  Be sure to ignore whitespace\n// and line endings.\n//\n//\n// Showdown usage:\n//\n//   var text = \"Markdown *rocks*.\";\n//\n//   var converter = new Showdown.converter();\n//   var html = converter.makeHtml(text);\n//\n//   alert(html);\n//\n// Note: move the sample code to the bottom of this\n// file before uncommenting it.\n//\n//\n// Showdown namespace\n//\nvar Showdown = {\n  extensions: {}\n}; //\n// forEach\n//\n\nvar forEach = Showdown.forEach = function (obj, callback) {\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else {\n    var i,\n        len = obj.length;\n\n    for (i = 0; i < len; i++) {\n      callback(obj[i], i, obj);\n    }\n  }\n}; //\n// Standard extension naming\n//\n\n\nvar stdExtName = function stdExtName(s) {\n  return s.replace(/[_-]||\\s/g, '').toLowerCase();\n}; //\n// converter\n//\n// Wraps all \"globals\" so that the only thing\n// exposed is makeHtml().\n//\n\n\nShowdown.converter = function (converter_options) {\n  //\n  // Globals:\n  //\n  // Global hashes, used by various utility routines\n  var g_urls;\n  var g_titles;\n  var g_html_blocks; // Used to track when we're inside an ordered or unordered list\n  // (see _ProcessListItems() for details):\n\n  var g_list_level = 0; // Global extensions\n\n  var g_lang_extensions = [];\n  var g_output_modifiers = []; //\n  // Automatic Extension Loading (node only):\n  //\n  //     if (typeof module !== 'undefined' && typeof exports !== 'undefined' && typeof require !== 'undefined') {\n  //         var fs = require('fs');\n  //\n  //         if (fs) {\n  //             // Search extensions folder\n  //             var extensions = fs.readdirSync(__dirname+'/extensions').filter(function (file) {\n  //                 return ~file.indexOf('.js');\n  //             }).map(function (file) {\n  //                 return file.replace(/\\.js$/, '');\n  //             });\n  //             // Load extensions into Showdown namespace\n  //             Showdown.forEach(extensions, function (ext) {\n  //                 var name = stdExtName(ext);\n  //                 Showdown.extensions[name] = require('./extensions/' + ext);\n  //             });\n  //         }\n  //     }\n\n  this.makeHtml = function (text, basePath) {\n    //\n    // Main function. The order in which other subs are called here is\n    // essential. Link and image substitutions need to happen before\n    // _EscapeSpecialCharsWithinTagAttributes(), so that any *'s or _'s in the <a>\n    // and <img> tags get encoded.\n    //\n    // Clear the global hashes. If we don't clear these, you get conflicts\n    // from other articles when generating a page which contains more than\n    // one article (e.g. an index page that shows the N most recent\n    // articles):\n    g_urls = {};\n    g_titles = {};\n    g_html_blocks = []; // attacklab: Replace ~ with ~T\n    // This lets us use tilde as an escape char to avoid md5 hashes\n    // The choice of character is arbitray; anything that isn't\n    // magic in Markdown will work.\n\n    text = text.replace(/~/g, \"~T\"); // attacklab: Replace $ with ~D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n\n    text = text.replace(/\\$/g, \"~D\"); // Standardize line endings\n\n    text = text.replace(/\\r\\n/g, \"\\n\"); // DOS to Unix\n\n    text = text.replace(/\\r/g, \"\\n\"); // Mac to Unix\n    // Make sure text begins and ends with a couple of newlines:\n\n    text = \"\\n\\n\" + text + \"\\n\\n\"; // Convert all tabs to spaces.\n\n    text = _Detab(text); // Strip any lines consisting only of spaces and tabs.\n    // This makes subsequent regexen easier to write, because we can\n    // match consecutive blank lines with /\\n+/ instead of something\n    // contorted like /[ \\t]*\\n+/ .\n\n    text = text.replace(/^[ \\t]+$/mg, \"\"); // Run language extensions\n\n    Showdown.forEach(g_lang_extensions, function (x) {\n      text = _ExecuteExtension(x, text);\n    }); // Handle github codeblocks prior to running HashHTML so that\n    // HTML contained within the codeblock gets escaped propertly\n\n    text = _DoGithubCodeBlocks(text); // Turn block-level HTML blocks into hash entries\n\n    text = _HashHTMLBlocks(text); // Strip link definitions, store in hashes.\n\n    text = _StripLinkDefinitions(text);\n    text = _RunBlockGamut(text);\n    text = _UnescapeSpecialChars(text); // attacklab: Restore dollar signs\n\n    text = text.replace(/~D/g, \"$$\"); // attacklab: Restore tildes\n\n    text = text.replace(/~T/g, \"~\"); // Run output modifiers\n\n    Showdown.forEach(g_output_modifiers, function (x) {\n      text = _ExecuteExtension(x, text);\n    });\n    var listSmiley = ['smile', 'wink', 'angry', 'biggrin', 'crying', 'frown', 'tongue', 'yawn', 'zipped', 'sick', 'whistle', 'evil', 'stress', 'delicious', 'bashful', 'bored', 'confused', 'heart', 'love', 'oh', 'nerdy', 'present', 'sun', 'sunglasses', 'xd', 'football', 'tennis', 'basketball', 'thumbup', 'thumbdown'];\n    var patternSmiley = ':(' + listSmiley.join('|') + '):';\n    text = text.replace(new RegExp(patternSmiley, 'g'), '<img src=\"' + basePath + 'images/smiley/$1.png\" />');\n    var patternQuote = '\\[quote=(\\d+)\\]';\n    text = text.replace(/\\[quote=(\\d+)\\]/g, function (match, id) {\n      var username = document.querySelector('#wf_post\\\\[' + id + '\\\\] .wf_username');\n\n      if (!username) {\n        return '<blockquote><br /><em>' + storeJs.trans['message.quote_unavailable'].replace('%id%', id) + '</em></blockquote>';\n      }\n\n      var content = '<blockquote><br /><strong>' + username.innerHTML + ' ' + storeJs.trans['forum.has_written'] + '</strong><br />' + document.querySelector('#wf_post\\\\[' + id + '\\\\] .wf_post_content').innerHTML + '</blockquote>';\n      return content;\n    });\n    return text;\n  }; //\n  // Options:\n  //\n  // Parse extensions options into separate arrays\n\n\n  if (converter_options && converter_options.extensions) {\n    var self = this; // Iterate over each plugin\n\n    Showdown.forEach(converter_options.extensions, function (plugin) {\n      // Assume it's a bundled plugin if a string is given\n      if (typeof plugin === 'string') {\n        plugin = Showdown.extensions[stdExtName(plugin)];\n      }\n\n      if (typeof plugin === 'function') {\n        // Iterate over each extension within that plugin\n        Showdown.forEach(plugin(self), function (ext) {\n          // Sort extensions by type\n          if (ext.type) {\n            if (ext.type === 'language' || ext.type === 'lang') {\n              g_lang_extensions.push(ext);\n            } else if (ext.type === 'output' || ext.type === 'html') {\n              g_output_modifiers.push(ext);\n            }\n          } else {\n            // Assume language extension\n            g_output_modifiers.push(ext);\n          }\n        });\n      } else {\n        console.log(plugin);\n        throw \"Extension '\" + plugin + \"' could not be loaded.  It was either not found or is not a valid extension.\";\n      }\n    });\n  }\n\n  var _ExecuteExtension = function _ExecuteExtension(ext, text) {\n    if (ext.regex) {\n      var re = new RegExp(ext.regex, 'g');\n      return text.replace(re, ext.replace);\n    } else if (ext.filter) {\n      return ext.filter(text);\n    }\n  };\n\n  var _StripLinkDefinitions = function _StripLinkDefinitions(text) {\n    //\n    // Strips link definitions from text, stores the URLs and titles in\n    // hash references.\n    //\n    // Link defs are in the form: ^[id]: url \"optional title\"\n\n    /*\n     var text = text.replace(/\n     ^[ ]{0,3}\\[(.+)\\]:  // id = $1  attacklab: g_tab_width - 1\n     [ \\t]*\n     \\n?\t\t\t\t// maybe *one* newline\n     [ \\t]*\n     <?(\\S+?)>?\t\t\t// url = $2\n     [ \\t]*\n     \\n?\t\t\t\t// maybe one newline\n     [ \\t]*\n     (?:\n     (\\n*)\t\t\t\t// any lines skipped = $3 attacklab: lookbehind removed\n     [\"(]\n     (.+?)\t\t\t\t// title = $4\n     [\")]\n     [ \\t]*\n     )?\t\t\t\t\t// title is optional\n     (?:\\n+|$)\n     /gm,\n     function(){...});\n     */\n    // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n    text += \"~0\";\n    text = text.replace(/^[ ]{0,3}\\[(.+)\\]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"(](.+?)[\")][ \\t]*)?(?:\\n+|(?=~0))/gm, function (wholeMatch, m1, m2, m3, m4) {\n      m1 = m1.toLowerCase();\n      g_urls[m1] = _EncodeAmpsAndAngles(m2); // Link IDs are case-insensitive\n\n      if (m3) {\n        // Oops, found blank lines, so it's not a title.\n        // Put back the parenthetical statement we stole.\n        return m3 + m4;\n      } else if (m4) {\n        g_titles[m1] = m4.replace(/\"/g, \"&quot;\");\n      } // Completely remove the definition from the text\n\n\n      return \"\";\n    }); // attacklab: strip sentinel\n\n    text = text.replace(/~0/, \"\");\n    return text;\n  };\n\n  var _HashHTMLBlocks = function _HashHTMLBlocks(text) {\n    // attacklab: Double up blank lines to reduce lookaround\n    text = text.replace(/\\n/g, \"\\n\\n\"); // Hashify HTML blocks:\n    // We only want to do this for block-level HTML tags, such as headers,\n    // lists, and tables. That's because we still want to wrap <p>s around\n    // \"paragraphs\" that are wrapped in non-block-level tags, such as anchors,\n    // phrase emphasis, and spans. The list of tags we're looking for is\n    // hard-coded:\n\n    var block_tags_a = \"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del|style|section|header|footer|nav|article|aside\";\n    var block_tags_b = \"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|style|section|header|footer|nav|article|aside\"; // First, look for nested blocks, e.g.:\n    //   <div>\n    //     <div>\n    //     tags for inner block must be indented.\n    //     </div>\n    //   </div>\n    //\n    // The outermost tags must start at the left margin for this to match, and\n    // the inner nested divs must be indented.\n    // We need to do this before the next, more liberal match, because the next\n    // match will start at the first `<div>` and stop at the first `</div>`.\n    // attacklab: This regex can be expensive when it fails.\n\n    /*\n     var text = text.replace(/\n     (\t\t\t\t\t\t// save in $1\n     ^\t\t\t\t\t// start of line  (with /m)\n     <($block_tags_a)\t// start tag = $2\n     \\b\t\t\t\t\t// word break\n     // attacklab: hack around khtml/pcre bug...\n     [^\\r]*?\\n\t\t\t// any number of lines, minimally matching\n     </\\2>\t\t\t\t// the matching end tag\n     [ \\t]*\t\t\t\t// trailing spaces/tabs\n     (?=\\n+)\t\t\t\t// followed by a newline\n     )\t\t\t\t\t\t// attacklab: there are sentinel newlines at end of document\n     /gm,function(){...}};\n     */\n\n    text = text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\\b[^\\r]*?\\n<\\/\\2>[ \\t]*(?=\\n+))/gm, hashElement); //\n    // Now match more liberally, simply from `\\n<tag>` to `</tag>\\n`\n    //\n\n    /*\n     var text = text.replace(/\n     (\t\t\t\t\t\t// save in $1\n     ^\t\t\t\t\t// start of line  (with /m)\n     <($block_tags_b)\t// start tag = $2\n     \\b\t\t\t\t\t// word break\n     // attacklab: hack around khtml/pcre bug...\n     [^\\r]*?\t\t\t\t// any number of lines, minimally matching\n     </\\2>\t\t\t\t// the matching end tag\n     [ \\t]*\t\t\t\t// trailing spaces/tabs\n     (?=\\n+)\t\t\t\t// followed by a newline\n     )\t\t\t\t\t\t// attacklab: there are sentinel newlines at end of document\n     /gm,function(){...}};\n     */\n\n    text = text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|style|section|header|footer|nav|article|aside)\\b[^\\r]*?<\\/\\2>[ \\t]*(?=\\n+)\\n)/gm, hashElement); // Special case just for <hr />. It was easier to make a special case than\n    // to make the other regex more complicated.\n\n    /*\n     text = text.replace(/\n     (\t\t\t\t\t\t// save in $1\n     \\n\\n\t\t\t\t// Starting after a blank line\n     [ ]{0,3}\n     (<(hr)\t\t\t\t// start tag = $2\n     \\b\t\t\t\t\t// word break\n     ([^<>])*?\t\t\t//\n     \\/?>)\t\t\t\t// the matching end tag\n     [ \\t]*\n     (?=\\n{2,})\t\t\t// followed by a blank line\n     )\n     /g,hashElement);\n     */\n\n    text = text.replace(/(\\n[ ]{0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g, hashElement); // Special case for standalone HTML comments:\n\n    /*\n     text = text.replace(/\n     (\t\t\t\t\t\t// save in $1\n     \\n\\n\t\t\t\t// Starting after a blank line\n     [ ]{0,3}\t\t\t// attacklab: g_tab_width - 1\n     <!\n     (--[^\\r]*?--\\s*)+\n     >\n     [ \\t]*\n     (?=\\n{2,})\t\t\t// followed by a blank line\n     )\n     /g,hashElement);\n     */\n\n    text = text.replace(/(\\n\\n[ ]{0,3}<!(--[^\\r]*?--\\s*)+>[ \\t]*(?=\\n{2,}))/g, hashElement); // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n\n    /*\n     text = text.replace(/\n     (?:\n     \\n\\n\t\t\t\t// Starting after a blank line\n     )\n     (\t\t\t\t\t\t// save in $1\n     [ ]{0,3}\t\t\t// attacklab: g_tab_width - 1\n     (?:\n     <([?%])\t\t\t// $2\n     [^\\r]*?\n     \\2>\n     )\n     [ \\t]*\n     (?=\\n{2,})\t\t\t// followed by a blank line\n     )\n     /g,hashElement);\n     */\n\n    text = text.replace(/(?:\\n\\n)([ ]{0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g, hashElement); // attacklab: Undo double lines (see comment at top of this function)\n\n    text = text.replace(/\\n\\n/g, \"\\n\");\n    return text;\n  };\n\n  var hashElement = function hashElement(wholeMatch, m1) {\n    var blockText = m1; // Undo double lines\n\n    blockText = blockText.replace(/\\n\\n/g, \"\\n\");\n    blockText = blockText.replace(/^\\n/, \"\"); // strip trailing blank lines\n\n    blockText = blockText.replace(/\\n+$/g, \"\"); // Replace the element text with a marker (\"~KxK\" where x is its key)\n\n    blockText = \"\\n\\n~K\" + (g_html_blocks.push(blockText) - 1) + \"K\\n\\n\";\n    return blockText;\n  };\n\n  var _RunBlockGamut = function _RunBlockGamut(text) {\n    //\n    // These are all the transformations that form block-level\n    // tags like paragraphs, headers, and list items.\n    //\n    text = _DoHeaders(text); // Do Horizontal Rules:\n\n    var key = hashBlock(\"<hr />\");\n    text = text.replace(/^[ ]{0,2}([ ]?\\*[ ]?){3,}[ \\t]*$/gm, key);\n    text = text.replace(/^[ ]{0,2}([ ]?\\-[ ]?){3,}[ \\t]*$/gm, key);\n    text = text.replace(/^[ ]{0,2}([ ]?\\_[ ]?){3,}[ \\t]*$/gm, key);\n    text = _DoLists(text);\n    text = _DoCodeBlocks(text);\n    text = _DoBlockQuotes(text); // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n    // was to escape raw HTML in the original Markdown source. This time,\n    // we're escaping the markup we've just created, so that we don't wrap\n    // <p> tags around block-level tags.\n\n    text = _HashHTMLBlocks(text);\n    text = _FormParagraphs(text);\n    return text;\n  };\n\n  var _RunSpanGamut = function _RunSpanGamut(text) {\n    //\n    // These are all the transformations that occur *within* block-level\n    // tags like paragraphs, headers, and list items.\n    //\n    text = _DoCodeSpans(text);\n    text = _EscapeSpecialCharsWithinTagAttributes(text);\n    text = _EncodeBackslashEscapes(text); // Process anchor and image tags. Images must come first,\n    // because ![foo][f] looks like an anchor.\n\n    text = _DoImages(text);\n    text = _DoAnchors(text); // Make links out of things like `<http://example.com/>`\n    // Must come after _DoAnchors(), because you can use < and >\n    // delimiters in inline links like [this](<url>).\n\n    text = _DoAutoLinks(text);\n    text = _EncodeAmpsAndAngles(text);\n    text = _DoItalicsAndBold(text); // Do hard breaks:\n\n    text = text.replace(/  +\\n/g, \" <br />\\n\");\n    return text;\n  };\n\n  var _EscapeSpecialCharsWithinTagAttributes = function _EscapeSpecialCharsWithinTagAttributes(text) {\n    //\n    // Within tags -- meaning between < and > -- encode [\\ ` * _] so they\n    // don't conflict with their use in Markdown for code, italics and strong.\n    //\n    // Build a regex to find HTML tags and comments.  See Friedl's\n    // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n    var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n    text = text.replace(regex, function (wholeMatch) {\n      var tag = wholeMatch.replace(/(.)<\\/?code>(?=.)/g, \"$1`\");\n      tag = escapeCharacters(tag, \"\\\\`*_\");\n      return tag;\n    });\n    return text;\n  };\n\n  var _DoAnchors = function _DoAnchors(text) {\n    //\n    // Turn Markdown link shortcuts into XHTML <a> tags.\n    //\n    //\n    // First, handle reference-style links: [link text] [id]\n    //\n\n    /*\n     text = text.replace(/\n     (\t\t\t\t\t\t\t// wrap whole match in $1\n     \\[\n     (\n     (?:\n     \\[[^\\]]*\\]\t\t// allow brackets nested one level\n     |\n     [^\\[]\t\t\t// or anything else\n     )*\n     )\n     \\]\n      [ ]?\t\t\t\t\t// one optional space\n     (?:\\n[ ]*)?\t\t\t\t// one optional newline followed by spaces\n      \\[\n     (.*?)\t\t\t\t\t// id = $3\n     \\]\n     )()()()()\t\t\t\t\t// pad remaining backreferences\n     /g,_DoAnchors_callback);\n     */\n    text = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\][ ]?(?:\\n[ ]*)?\\[(.*?)\\])()()()()/g, writeAnchorTag); //\n    // Next, inline-style links: [link text](url \"optional title\")\n    //\n\n    /*\n     text = text.replace(/\n     (\t\t\t\t\t\t// wrap whole match in $1\n     \\[\n     (\n     (?:\n     \\[[^\\]]*\\]\t// allow brackets nested one level\n     |\n     [^\\[\\]]\t\t\t// or anything else\n     )\n     )\n     \\]\n     \\(\t\t\t\t\t\t// literal paren\n     [ \\t]*\n     ()\t\t\t\t\t\t// no id, so leave $3 empty\n     <?(.*?)>?\t\t\t\t// href = $4\n     [ \\t]*\n     (\t\t\t\t\t\t// $5\n     (['\"])\t\t\t\t// quote char = $6\n     (.*?)\t\t\t\t// Title = $7\n     \\6\t\t\t\t\t// matching quote\n     [ \\t]*\t\t\t\t// ignore any spaces/tabs between closing quote and )\n     )?\t\t\t\t\t\t// title is optional\n     \\)\n     )\n     /g,writeAnchorTag);\n     */\n\n    text = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]\\([ \\t]*()<?(.*?(?:\\(.*?\\).*?)?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g, writeAnchorTag); //\n    // Last, handle reference-style shortcuts: [link text]\n    // These must come last in case you've also got [link test][1]\n    // or [link test](/foo)\n    //\n\n    /*\n     text = text.replace(/\n     (\t\t \t\t\t\t\t// wrap whole match in $1\n     \\[\n     ([^\\[\\]]+)\t\t\t\t// link text = $2; can't contain '[' or ']'\n     \\]\n     )()()()()()\t\t\t\t\t// pad rest of backreferences\n     /g, writeAnchorTag);\n     */\n\n    text = text.replace(/(\\[([^\\[\\]]+)\\])()()()()()/g, writeAnchorTag);\n    return text;\n  };\n\n  var writeAnchorTag = function writeAnchorTag(wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n    if (m7 == undefined) m7 = \"\";\n    var whole_match = m1;\n    var link_text = m2;\n    var link_id = m3.toLowerCase();\n    var url = m4;\n    var title = m7;\n\n    if (url == \"\") {\n      if (link_id == \"\") {\n        // lower-case and turn embedded newlines into spaces\n        link_id = link_text.toLowerCase().replace(/ ?\\n/g, \" \");\n      }\n\n      url = \"#\" + link_id;\n\n      if (g_urls[link_id] != undefined) {\n        url = g_urls[link_id];\n\n        if (g_titles[link_id] != undefined) {\n          title = g_titles[link_id];\n        }\n      } else {\n        if (whole_match.search(/\\(\\s*\\)$/m) > -1) {\n          // Special case for explicit empty url\n          url = \"\";\n        } else {\n          return whole_match;\n        }\n      }\n    }\n\n    url = escapeCharacters(url, \"*_\");\n    var result = \"<a href=\\\"\" + url + \"\\\"\";\n\n    if (title != \"\") {\n      title = title.replace(/\"/g, \"&quot;\");\n      title = escapeCharacters(title, \"*_\");\n      result += \" title=\\\"\" + title + \"\\\"\";\n    }\n\n    result += \">\" + link_text + \"</a>\";\n    return result;\n  };\n\n  var _DoImages = function _DoImages(text) {\n    //\n    // Turn Markdown image shortcuts into <img> tags.\n    //\n    //\n    // First, handle reference-style labeled images: ![alt text][id]\n    //\n\n    /*\n     text = text.replace(/\n     (\t\t\t\t\t\t// wrap whole match in $1\n     !\\[\n     (.*?)\t\t\t\t// alt text = $2\n     \\]\n      [ ]?\t\t\t\t// one optional space\n     (?:\\n[ ]*)?\t\t\t// one optional newline followed by spaces\n      \\[\n     (.*?)\t\t\t\t// id = $3\n     \\]\n     )()()()()\t\t\t\t// pad rest of backreferences\n     /g,writeImageTag);\n     */\n    text = text.replace(/(!\\[(.*?)\\][ ]?(?:\\n[ ]*)?\\[(.*?)\\])()()()()/g, writeImageTag); //\n    // Next, handle inline images:  ![alt text](url \"optional title\")\n    // Don't forget: encode * and _\n\n    /*\n     text = text.replace(/\n     (\t\t\t\t\t\t// wrap whole match in $1\n     !\\[\n     (.*?)\t\t\t\t// alt text = $2\n     \\]\n     \\s?\t\t\t\t\t// One optional whitespace character\n     \\(\t\t\t\t\t// literal paren\n     [ \\t]*\n     ()\t\t\t\t\t// no id, so leave $3 empty\n     <?(\\S+?)>?\t\t\t// src url = $4\n     [ \\t]*\n     (\t\t\t\t\t// $5\n     (['\"])\t\t\t// quote char = $6\n     (.*?)\t\t\t// title = $7\n     \\6\t\t\t\t// matching quote\n     [ \\t]*\n     )?\t\t\t\t\t// title is optional\n     \\)\n     )\n     /g,writeImageTag);\n     */\n\n    text = text.replace(/(!\\[(.*?)\\]\\s?\\([ \\t]*()<?(\\S+?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g, writeImageTag);\n    return text;\n  };\n\n  var writeImageTag = function writeImageTag(wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n    var whole_match = m1;\n    var alt_text = m2;\n    var link_id = m3.toLowerCase();\n    var url = m4;\n    var title = m7;\n    if (!title) title = \"\";\n\n    if (url == \"\") {\n      if (link_id == \"\") {\n        // lower-case and turn embedded newlines into spaces\n        link_id = alt_text.toLowerCase().replace(/ ?\\n/g, \" \");\n      }\n\n      url = \"#\" + link_id;\n\n      if (g_urls[link_id] != undefined) {\n        url = g_urls[link_id];\n\n        if (g_titles[link_id] != undefined) {\n          title = g_titles[link_id];\n        }\n      } else {\n        return whole_match;\n      }\n    }\n\n    alt_text = alt_text.replace(/\"/g, \"&quot;\");\n    url = escapeCharacters(url, \"*_\");\n    var result = \"<img src=\\\"\" + url + \"\\\" alt=\\\"\" + alt_text + \"\\\"\"; // attacklab: Markdown.pl adds empty title attributes to images.\n    // Replicate this bug.\n    //if (title != \"\") {\n\n    title = title.replace(/\"/g, \"&quot;\");\n    title = escapeCharacters(title, \"*_\");\n    result += \" title=\\\"\" + title + \"\\\"\"; //}\n\n    result += \" />\";\n    return result;\n  };\n\n  var _DoHeaders = function _DoHeaders(text) {\n    // Setext-style headers:\n    //\tHeader 1\n    //\t========\n    //\n    //\tHeader 2\n    //\t--------\n    //\n    text = text.replace(/^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm, function (wholeMatch, m1) {\n      return hashBlock('<h1 id=\"' + headerId(m1) + '\">' + _RunSpanGamut(m1) + \"</h1>\");\n    });\n    text = text.replace(/^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm, function (matchFound, m1) {\n      return hashBlock('<h2 id=\"' + headerId(m1) + '\">' + _RunSpanGamut(m1) + \"</h2>\");\n    }); // atx-style headers:\n    //  # Header 1\n    //  ## Header 2\n    //  ## Header 2 with closing hashes ##\n    //  ...\n    //  ###### Header 6\n    //\n\n    /*\n     text = text.replace(/\n     ^(\\#{1,6})\t\t\t\t// $1 = string of #'s\n     [ \\t]*\n     (.+?)\t\t\t\t\t// $2 = Header text\n     [ \\t]*\n     \\#*\t\t\t\t\t\t// optional closing #'s (not counted)\n     \\n+\n     /gm, function() {...});\n     */\n\n    text = text.replace(/^(\\#{1,6})[ \\t]*(.+?)[ \\t]*\\#*\\n+/gm, function (wholeMatch, m1, m2) {\n      var h_level = m1.length;\n      return hashBlock(\"<h\" + h_level + ' id=\"' + headerId(m2) + '\">' + _RunSpanGamut(m2) + \"</h\" + h_level + \">\");\n    });\n\n    function headerId(m) {\n      return m.replace(/[^\\w]/g, '').toLowerCase();\n    }\n\n    return text;\n  }; // This declaration keeps Dojo compressor from outputting garbage:\n\n\n  var _ProcessListItems;\n\n  var _DoLists = function _DoLists(text) {\n    //\n    // Form HTML ordered (numbered) and unordered (bulleted) lists.\n    //\n    // attacklab: add sentinel to hack around khtml/safari bug:\n    // http://bugs.webkit.org/show_bug.cgi?id=11231\n    text += \"~0\"; // Re-usable pattern to match any entirel ul or ol list:\n\n    /*\n     var whole_list = /\n     (\t\t\t\t\t\t\t\t\t// $1 = whole list\n     (\t\t\t\t\t\t\t\t// $2\n     [ ]{0,3}\t\t\t\t\t// attacklab: g_tab_width - 1\n     ([*+-]|\\d+[.])\t\t\t\t// $3 = first list item marker\n     [ \\t]+\n     )\n     [^\\r]+?\n     (\t\t\t\t\t\t\t\t// $4\n     ~0\t\t\t\t\t\t\t// sentinel for workaround; should be $\n     |\n     \\n{2,}\n     (?=\\S)\n     (?!\t\t\t\t\t\t\t// Negative lookahead for another list item marker\n     [ \\t]*\n     (?:[*+-]|\\d+[.])[ \\t]+\n     )\n     )\n     )/g\n     */\n\n    var whole_list = /^(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm;\n\n    if (g_list_level) {\n      text = text.replace(whole_list, function (wholeMatch, m1, m2) {\n        var list = m1;\n        var list_type = m2.search(/[*+-]/g) > -1 ? \"ul\" : \"ol\"; // Turn double returns into triple returns, so that we can make a\n        // paragraph for the last item in a list, if necessary:\n\n        list = list.replace(/\\n{2,}/g, \"\\n\\n\\n\");\n        ;\n\n        var result = _ProcessListItems(list); // Trim any trailing whitespace, to put the closing `</$list_type>`\n        // up on the preceding line, to get it past the current stupid\n        // HTML block parser. This is a hack to work around the terrible\n        // hack that is the HTML block parser.\n\n\n        result = result.replace(/\\s+$/, \"\");\n        result = \"<\" + list_type + \">\" + result + \"</\" + list_type + \">\\n\";\n        return result;\n      });\n    } else {\n      whole_list = /(\\n\\n|^\\n?)(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/g;\n      text = text.replace(whole_list, function (wholeMatch, m1, m2, m3) {\n        var runup = m1;\n        var list = m2;\n        var list_type = m3.search(/[*+-]/g) > -1 ? \"ul\" : \"ol\"; // Turn double returns into triple returns, so that we can make a\n        // paragraph for the last item in a list, if necessary:\n\n        var list = list.replace(/\\n{2,}/g, \"\\n\\n\\n\");\n        ;\n\n        var result = _ProcessListItems(list);\n\n        result = runup + \"<\" + list_type + \">\\n\" + result + \"</\" + list_type + \">\\n\";\n        return result;\n      });\n    } // attacklab: strip sentinel\n\n\n    text = text.replace(/~0/, \"\");\n    return text;\n  };\n\n  _ProcessListItems = function _ProcessListItems(list_str) {\n    //\n    //  Process the contents of a single ordered or unordered list, splitting it\n    //  into individual list items.\n    //\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    g_list_level++; // trim trailing blank lines:\n\n    list_str = list_str.replace(/\\n{2,}$/, \"\\n\"); // attacklab: add sentinel to emulate \\z\n\n    list_str += \"~0\";\n    /*\n     list_str = list_str.replace(/\n     (\\n)?\t\t\t\t\t\t\t// leading line = $1\n     (^[ \\t]*)\t\t\t\t\t\t// leading whitespace = $2\n     ([*+-]|\\d+[.]) [ \\t]+\t\t\t// list marker = $3\n     ([^\\r]+?\t\t\t\t\t\t// list item text   = $4\n     (\\n{1,2}))\n     (?= \\n* (~0 | \\2 ([*+-]|\\d+[.]) [ \\t]+))\n     /gm, function(){...});\n     */\n\n    list_str = list_str.replace(/(\\n)?(^[ \\t]*)([*+-]|\\d+[.])[ \\t]+([^\\r]+?(\\n{1,2}))(?=\\n*(~0|\\2([*+-]|\\d+[.])[ \\t]+))/gm, function (wholeMatch, m1, m2, m3, m4) {\n      var item = m4;\n      var leading_line = m1;\n      var leading_space = m2;\n\n      if (leading_line || item.search(/\\n{2,}/) > -1) {\n        item = _RunBlockGamut(_Outdent(item));\n      } else {\n        // Recursion for sub-lists:\n        item = _DoLists(_Outdent(item));\n        item = item.replace(/\\n$/, \"\"); // chomp(item)\n\n        item = _RunSpanGamut(item);\n      }\n\n      return \"<li>\" + item + \"</li>\\n\";\n    }); // attacklab: strip sentinel\n\n    list_str = list_str.replace(/~0/g, \"\");\n    g_list_level--;\n    return list_str;\n  };\n\n  var _DoCodeBlocks = function _DoCodeBlocks(text) {\n    //\n    //  Process Markdown `<pre><code>` blocks.\n    //\n\n    /*\n     text = text.replace(text,\n     /(?:\\n\\n|^)\n     (\t\t\t\t\t\t\t\t// $1 = the code block -- one or more lines, starting with a space/tab\n     (?:\n     (?:[ ]{4}|\\t)\t\t\t// Lines must start with a tab or a tab-width of spaces - attacklab: g_tab_width\n     .*\\n+\n     )+\n     )\n     (\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))\t// attacklab: g_tab_width\n     /g,function(){...});\n     */\n    // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n    text += \"~0\";\n    text = text.replace(/(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))/g, function (wholeMatch, m1, m2) {\n      var codeblock = m1;\n      var nextChar = m2;\n      codeblock = _EncodeCode(_Outdent(codeblock));\n      codeblock = _Detab(codeblock);\n      codeblock = codeblock.replace(/^\\n+/g, \"\"); // trim leading newlines\n\n      codeblock = codeblock.replace(/\\n+$/g, \"\"); // trim trailing whitespace\n\n      codeblock = \"<pre><code>\" + codeblock + \"\\n</code></pre>\";\n      return hashBlock(codeblock) + nextChar;\n    }); // attacklab: strip sentinel\n\n    text = text.replace(/~0/, \"\");\n    return text;\n  };\n\n  var _DoGithubCodeBlocks = function _DoGithubCodeBlocks(text) {\n    //\n    //  Process Github-style code blocks\n    //  Example:\n    //  ```ruby\n    //  def hello_world(x)\n    //    puts \"Hello, #{x}\"\n    //  end\n    //  ```\n    //\n    // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n    text += \"~0\";\n    text = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g, function (wholeMatch, m1, m2) {\n      var language = m1;\n      var codeblock = m2;\n      codeblock = _EncodeCode(codeblock);\n      codeblock = _Detab(codeblock);\n      codeblock = codeblock.replace(/^\\n+/g, \"\"); // trim leading newlines\n\n      codeblock = codeblock.replace(/\\n+$/g, \"\"); // trim trailing whitespace\n\n      codeblock = \"<pre><code\" + (language ? \" class=\\\"\" + language + '\"' : \"\") + \">\" + codeblock + \"\\n</code></pre>\";\n      return hashBlock(codeblock);\n    }); // attacklab: strip sentinel\n\n    text = text.replace(/~0/, \"\");\n    return text;\n  };\n\n  var hashBlock = function hashBlock(text) {\n    text = text.replace(/(^\\n+|\\n+$)/g, \"\");\n    return \"\\n\\n~K\" + (g_html_blocks.push(text) - 1) + \"K\\n\\n\";\n  };\n\n  var _DoCodeSpans = function _DoCodeSpans(text) {\n    //\n    //   *  Backtick quotes are used for <code></code> spans.\n    //\n    //   *  You can use multiple backticks as the delimiters if you want to\n    //\t include literal backticks in the code span. So, this input:\n    //\n    //\t\t Just type ``foo `bar` baz`` at the prompt.\n    //\n    //\t   Will translate to:\n    //\n    //\t\t <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n    //\n    //\tThere's no arbitrary limit to the number of backticks you\n    //\tcan use as delimters. If you need three consecutive backticks\n    //\tin your code, use four for delimiters, etc.\n    //\n    //  *  You can use spaces to get literal backticks at the edges:\n    //\n    //\t\t ... type `` `bar` `` ...\n    //\n    //\t   Turns to:\n    //\n    //\t\t ... type <code>`bar`</code> ...\n    //\n\n    /*\n     text = text.replace(/\n     (^|[^\\\\])\t\t\t\t\t// Character before opening ` can't be a backslash\n     (`+)\t\t\t\t\t\t// $2 = Opening run of `\n     (\t\t\t\t\t\t\t// $3 = The code block\n     [^\\r]*?\n     [^`]\t\t\t\t\t// attacklab: work around lack of lookbehind\n     )\n     \\2\t\t\t\t\t\t\t// Matching closer\n     (?!`)\n     /gm, function(){...});\n     */\n    text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm, function (wholeMatch, m1, m2, m3, m4) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, \"\"); // leading whitespace\n\n      c = c.replace(/[ \\t]*$/g, \"\"); // trailing whitespace\n\n      c = _EncodeCode(c);\n      return m1 + \"<code>\" + c + \"</code>\";\n    });\n    return text;\n  };\n\n  var _EncodeCode = function _EncodeCode(text) {\n    //\n    // Encode/escape certain characters inside Markdown code runs.\n    // The point is that in code, these characters are literals,\n    // and lose their special Markdown meanings.\n    //\n    // Encode all ampersands; HTML entities are not\n    // entities within a Markdown code span.\n    text = text.replace(/&/g, \"&amp;\"); // Do the angle bracket song and dance:\n\n    text = text.replace(/</g, \"&lt;\");\n    text = text.replace(/>/g, \"&gt;\"); // Now, escape characters that are magic in Markdown:\n\n    text = escapeCharacters(text, \"\\*_{}[]\\\\\", false); // jj the line above breaks this:\n    //---\n    //* Item\n    //   1. Subitem\n    //            special char: *\n    //---\n\n    return text;\n  };\n\n  var _DoItalicsAndBold = function _DoItalicsAndBold(text) {\n    // <strong> must go first:\n    text = text.replace(/(\\*\\*|__)(?=\\S)([^\\r]*?\\S[*_]*)\\1/g, \"<strong>$2</strong>\");\n    text = text.replace(/(\\*|_)(?=\\S)([^\\r]*?\\S)\\1/g, \"<em>$2</em>\");\n    return text;\n  };\n\n  var _DoBlockQuotes = function _DoBlockQuotes(text) {\n    /*\n     text = text.replace(/\n     (\t\t\t\t\t\t\t\t// Wrap whole match in $1\n     (\n     ^[ \\t]*>[ \\t]?\t\t\t// '>' at the start of a line\n     .+\\n\t\t\t\t\t// rest of the first line\n     (.+\\n)*\t\t\t\t\t// subsequent consecutive lines\n     \\n*\t\t\t\t\t\t// blanks\n     )+\n     )\n     /gm, function(){...});\n     */\n    text = text.replace(/((^[ \\t]*>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm, function (wholeMatch, m1) {\n      var bq = m1; // attacklab: hack around Konqueror 3.5.4 bug:\n      // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n\n      bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, \"~0\"); // trim one level of quoting\n      // attacklab: clean up hack\n\n      bq = bq.replace(/~0/g, \"\");\n      bq = bq.replace(/^[ \\t]+$/gm, \"\"); // trim whitespace-only lines\n\n      bq = _RunBlockGamut(bq); // recurse\n\n      bq = bq.replace(/(^|\\n)/g, \"$1  \"); // These leading spaces screw with <pre> content, so we need to fix that:\n\n      bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n        var pre = m1; // attacklab: hack around Konqueror 3.5.4 bug:\n\n        pre = pre.replace(/^  /mg, \"~0\");\n        pre = pre.replace(/~0/g, \"\");\n        return pre;\n      });\n      return hashBlock(\"<blockquote>\\n\" + bq + \"\\n</blockquote>\");\n    });\n    return text;\n  };\n\n  var _FormParagraphs = function _FormParagraphs(text) {\n    //\n    //  Params:\n    //    $text - string to process with html <p> tags\n    //\n    // Strip leading and trailing lines:\n    text = text.replace(/^\\n+/g, \"\");\n    text = text.replace(/\\n+$/g, \"\");\n    var grafs = text.split(/\\n{2,}/g);\n    var grafsOut = []; //\n    // Wrap <p> tags.\n    //\n\n    var end = grafs.length;\n\n    for (var i = 0; i < end; i++) {\n      var str = grafs[i]; // if this is an HTML marker, copy it\n\n      if (str.search(/~K(\\d+)K/g) >= 0) {\n        grafsOut.push(str);\n      } else if (str.search(/\\S/) >= 0) {\n        str = _RunSpanGamut(str);\n        str = str.replace(/^([ \\t]*)/g, \"<p>\");\n        str += \"</p>\";\n        grafsOut.push(str);\n      }\n    } //\n    // Unhashify HTML blocks\n    //\n\n\n    end = grafsOut.length;\n\n    for (var i = 0; i < end; i++) {\n      // if this is a marker for an html block...\n      while (grafsOut[i].search(/~K(\\d+)K/) >= 0) {\n        var blockText = g_html_blocks[RegExp.$1];\n        blockText = blockText.replace(/\\$/g, \"$$$$\"); // Escape any dollar signs\n\n        grafsOut[i] = grafsOut[i].replace(/~K\\d+K/, blockText);\n      }\n    }\n\n    return grafsOut.join(\"\\n\\n\");\n  };\n\n  var _EncodeAmpsAndAngles = function _EncodeAmpsAndAngles(text) {\n    // Smart processing for ampersands and angle brackets that need to be encoded.\n    // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n    //   http://bumppo.net/projects/amputator/\n    text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, \"&amp;\"); // Encode naked <'s\n\n    text = text.replace(/<(?![a-z\\/?\\$!])/gi, \"&lt;\");\n    return text;\n  };\n\n  var _EncodeBackslashEscapes = function _EncodeBackslashEscapes(text) {\n    //\n    //   Parameter:  String.\n    //   Returns:\tThe string, with after processing the following backslash\n    //\t\t\t   escape sequences.\n    //\n    // attacklab: The polite way to do this is with the new\n    // escapeCharacters() function:\n    //\n    // \ttext = escapeCharacters(text,\"\\\\\",true);\n    // \ttext = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n    //\n    // ...but we're sidestepping its use of the (slow) RegExp constructor\n    // as an optimization for Firefox.  This function gets called a LOT.\n    text = text.replace(/\\\\(\\\\)/g, escapeCharacters_callback);\n    text = text.replace(/\\\\([`*_{}\\[\\]()>#+-.!])/g, escapeCharacters_callback);\n    return text;\n  };\n\n  var _DoAutoLinks = function _DoAutoLinks(text) {\n    text = text.replace(/<((https?|ftp|dict):[^'\">\\s]+)>/gi, \"<a href=\\\"$1\\\">$1</a>\"); // Email addresses: <address@domain.foo>\n\n    /*\n     text = text.replace(/\n     <\n     (?:mailto:)?\n     (\n     [-.\\w]+\n     \\@\n     [-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+\n     )\n     >\n     /gi, _DoAutoLinks_callback());\n     */\n\n    text = text.replace(/<(?:mailto:)?([-.\\w]+\\@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi, function (wholeMatch, m1) {\n      return _EncodeEmailAddress(_UnescapeSpecialChars(m1));\n    });\n    return text;\n  };\n\n  var _EncodeEmailAddress = function _EncodeEmailAddress(addr) {\n    //\n    //  Input: an email address, e.g. \"foo@example.com\"\n    //\n    //  Output: the email address as a mailto link, with each character\n    //\tof the address encoded as either a decimal or hex entity, in\n    //\tthe hopes of foiling most address harvesting spam bots. E.g.:\n    //\n    //\t<a href=\"&#x6D;&#97;&#105;&#108;&#x74;&#111;:&#102;&#111;&#111;&#64;&#101;\n    //\t   x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;\">&#102;&#111;&#111;\n    //\t   &#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;</a>\n    //\n    //  Based on a filter by Matthew Wickline, posted to the BBEdit-Talk\n    //  mailing list: <http://tinyurl.com/yu7ue>\n    //\n    var encode = [function (ch) {\n      return \"&#\" + ch.charCodeAt(0) + \";\";\n    }, function (ch) {\n      return \"&#x\" + ch.charCodeAt(0).toString(16) + \";\";\n    }, function (ch) {\n      return ch;\n    }];\n    addr = \"mailto:\" + addr;\n    addr = addr.replace(/./g, function (ch) {\n      if (ch == \"@\") {\n        // this *must* be encoded. I insist.\n        ch = encode[Math.floor(Math.random() * 2)](ch);\n      } else if (ch != \":\") {\n        // leave ':' alone (to spot mailto: later)\n        var r = Math.random(); // roughly 10% raw, 45% hex, 45% dec\n\n        ch = r > .9 ? encode[2](ch) : r > .45 ? encode[1](ch) : encode[0](ch);\n      }\n\n      return ch;\n    });\n    addr = \"<a href=\\\"\" + addr + \"\\\">\" + addr + \"</a>\";\n    addr = addr.replace(/\">.+:/g, \"\\\">\"); // strip the mailto: from the visible part\n\n    return addr;\n  };\n\n  var _UnescapeSpecialChars = function _UnescapeSpecialChars(text) {\n    //\n    // Swap back in all the special characters we've hidden.\n    //\n    text = text.replace(/~E(\\d+)E/g, function (wholeMatch, m1) {\n      var charCodeToReplace = parseInt(m1);\n      return String.fromCharCode(charCodeToReplace);\n    });\n    return text;\n  };\n\n  var _Outdent = function _Outdent(text) {\n    //\n    // Remove one level of line-leading tabs or spaces\n    //\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    text = text.replace(/^(\\t|[ ]{1,4})/gm, \"~0\"); // attacklab: g_tab_width\n    // attacklab: clean up hack\n\n    text = text.replace(/~0/g, \"\");\n    return text;\n  };\n\n  var _Detab = function _Detab(text) {\n    // attacklab: Detab's completely rewritten for speed.\n    // In perl we could fix it by anchoring the regexp with \\G.\n    // In javascript we're less fortunate.\n    // expand first n-1 tabs\n    text = text.replace(/\\t(?=\\t)/g, \"    \"); // attacklab: g_tab_width\n    // replace the nth with two sentinels\n\n    text = text.replace(/\\t/g, \"~A~B\"); // use the sentinel to anchor our regex so it doesn't explode\n\n    text = text.replace(/~B(.+?)~A/g, function (wholeMatch, m1, m2) {\n      var leadingText = m1;\n      var numSpaces = 4 - leadingText.length % 4; // attacklab: g_tab_width\n      // there *must* be a better way to do this:\n\n      for (var i = 0; i < numSpaces; i++) {\n        leadingText += \" \";\n      }\n\n      return leadingText;\n    }); // clean up sentinels\n\n    text = text.replace(/~A/g, \"    \"); // attacklab: g_tab_width\n\n    text = text.replace(/~B/g, \"\");\n    return text;\n  }; //\n  //  attacklab: Utility functions\n  //\n\n\n  var escapeCharacters = function escapeCharacters(text, charsToEscape, afterBackslash) {\n    // First we have to escape the escape characters so that\n    // we can build a character class out of them\n    var regexString = \"([\" + charsToEscape.replace(/([\\[\\]\\\\])/g, \"\\\\$1\") + \"])\";\n\n    if (afterBackslash) {\n      regexString = \"\\\\\\\\\" + regexString;\n    }\n\n    var regex = new RegExp(regexString, \"g\");\n    text = text.replace(regex, escapeCharacters_callback);\n    return text;\n  };\n\n  var escapeCharacters_callback = function escapeCharacters_callback(wholeMatch, m1) {\n    var charCodeToEscape = m1.charCodeAt(0);\n    return \"~E\" + charCodeToEscape + \"E\";\n  };\n}; // end of Showdown.converter\n// export\n\n\nif (true) {\n  module.exports = Showdown;\n}\n\nwindow.Showdown = Showdown; // stolen from AMD branch of underscore\n// AMD define happens at the end for compatibility with AMD loaders\n// that don't enforce next-turn semantics on modules.\n\nif (true) {\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return Showdown;\n  }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n//# sourceURL=webpack:///./Resources/asset/showdown/src/showdown.js?");

/***/ })

/******/ });